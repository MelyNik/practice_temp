print('helo world')

# Переменные
# Типы данных справедливы
# int - целые числа.
# float - числа с плавающей точкой (вещественные). 
# boolean - логические переменные. 
# str - строки.
# list - списки (что то подобное массива)
# и др.
# Python – язык с динамической типизацией
# value = 2809      Так к переменным присваиваются значения.
# name = 'Sergey'  

# В C# перед переменными мы указывали тип данных, в Python сразу 
# указываем переменную, без обозначение типа данных.
# value - просто указать переменную и ни чего не присвоить мы не можем, 
# в таком случае можем указать переменную value = None, 
# где в дальнейшем когда нам нужно опять присвоить к value = другое значение.

a = 123
b = 'Hello World' # Строку объявляем одинарными кавычками.
c = 1.2
# Что бы в строке 'Hello World' указать (')  можно записать так "Hello 'World"  и на оборот.
# Или так 'Hello \'World'
# 'Hello \nWorld'   - \n позволяет перейти на новую строку после Hello.
print(type(a)) # Данной командой можем вывести в терминал тип конкретной переменной.
print(type(b)) # Данной командой можем вывести в терминал тип конкретной переменной.

print(a, '-', b, '-', c) # Другой способ вывода.Где '-' это то, что мы можем написать между переменными.
# Или так
print('{} - {} - {}'.format(a, b, c))
# Или так
print('{1} - {2} - {0}'.format(a, b, c)) # Где цифры с скобках означают порядок вывода переменных по очерёдности.
# Или так
print(f'{a} - {b} - {c}')

e = True  # Логические переменные
t = False # Логические переменные
print(f'{e} - {t}')

# list = [] # Что то похожее на массив.
# # Вывод массива тож простой.
# print(list)
# # Или так 
# list = [1,2,3] 
# print(list)
# # Или так строковый массив.
# list = ['1','2','Hello','3'] 
# print(list)
# # Или знаем, что в Python тип данных определяется автоматически, можем в массиве указать смешанный тип данных.
# list = ['1',2,'Hello','3',55,False] # Но так лучше не делать, тип данных лучше оставлять однотипным.
# print(list)
# # Пробел может поломать программу. Пример:
# # list = ['1',2,'Hello']
# #  col = ['3',55,False]  Ошибка в том, что переменная col стоит не в начале строки, а с начала стоит пробел
# # print(list)            И из за этого будет выдавать ошибку, т.е. пробел ломает программу.
# # print(col)             И не важно пробел будет стоять перед переменной или другой строкой, ошибка всё равно будет.



# # Ввод данных команда input().
# 
# print('Введите число a')
# a = input()
# print('Введите число b')
# b = input()
# print(a, '+', b, '=', a+b)
# # Вывод принт покажет 510, а не 15, потому, что по умолчанию мы вводим строковый тип данных,
# # который нужно преобразовать в нужный нам тип данных при необходимости, а именно:
# print('Введите число a')
# a = int(input()) # Т.е. int от input.
# print('Введите число b')
# b = int(input())
# print(a, '+', b, '=', a+b)



# Арифметические операции.

# +, -,*, /, %, //,**
# Приоритет операций
# **, ⊕, ⊖,*, /, //, %, +, -
# ( ) Скобки меняют приоритет
a = 5
b = 4
c = a/b # При делении переменная "с" станет автоматически вещественной.
print(c)
# Если нам не обходимо что бы было только целое число без остатка при выводе, то используем два деления "//"
# Пример:
a = 12
b = 8
c = a//b # При делении переменная "с" станет автоматически вещественной.
print(c)
# Если нам нужен остаток от деления то так:
a = 12
b = 8
c = a % b 
print(c)
# Есть возможность возводить в степени:
a = 12
b = 8
c = a ** b 
print(c)
# Может возникнуть сложность при умножении вещественного числа и что бы её избежать нужно:
a = 1.3
b = 3
c = round(a * b) # Для того, что бы округлить по математическим правилам.
# c = round(a * b, 3) - что заставит вывести 3 числа после запятой.
print(c)

# Сокращённые операции присваивания:
a = 5
a = a + 3 # Что бы это не писать можно изобразить так - а += 5
# То же самое работает и для других арифметических ситуациях.
print(a)



# Логические операции.

# >, >=, <, <=, ==, !=
# not, and, or – не путать с &, |,
# ^
# Кое-что ещё: is, is not, in, not in
a = 1 > 4
print(a) # На выходе получим False, так как  не больше 4.
a = 1 < 4
print(a) # На выходе получим True, так как 4 больше 1.
# Или
a = 1 < 4 and 5 > 2
print(a) # На выходе получим True, так как 4 больше 1.
# Если:
a = "1 < 4" 
b = "1 < 4"
print(a==b) # Будет True так как они равны.
# Или 
a = [1 , 4] 
b = [1 , 4] 
print(a==b) # Будет True так как они равны.
# Или
a = 1 < 4 < 5
print(a) # На выходе получим True, так как 4 больше 1, но меньше 5.

# Операция "or"
f = 1>2 or 4<6 # Дизъюнкция - нужно прочесть лекции.
print(f)

# Операция "in"
f = [1,2,3,4]
print(2 in f) # Будет True так как цифра 2 есть в списке f.
# Или
print( not 2 in f) # Будет False так как цифра 2 есть в списке f, а not указывает на отсутствие 2 в f, а оно есть.

is_odd = f[0] % 2 == 0
print(is_odd) # Будет False так как остаток от f[0] % 2 не равен 0.
# Или
is_odd = not f[0] % 2 # f[0] % 2 - остаток будет "1", но мы написали not f[0] % 2, 
# т.е. не 1. 1 - это True, а 0 это False. Получается мы на писали не единица, а не единица это 0 т.е. False.
print(is_odd) # Будет False так как остаток от f[0] % 2 не равен 0.



# # Управляющие конструкции: if, if-else (Логические ветвления)5
# # Метод записи:
# a = int(input('a = '))
# b = int(input('b = '))
# if a > b:
#     print(f'c = a = {a}') # Не забываем, что пробелы могут поломать программу.
# else:
#     print(f'c = b = {b}')
# Метод записи:
# user_name = input('Введите имя: ')
# if user_name == 'Маша':
#     print('Ура это Маша!')
# elif user_name == 'Марина':
#     print('Рады видеть Марину!')
# elif user_name == 'Антон':
#     print('Антон, привет!')
# else:
#     print(f'Привет, {user_name}')

# Управляющие конструкции: while, for (Цикл).

o = 23
i = 0
while o != 0:
    i = i * 10 + (o % 10)
    o //= 10
print(i)

while o != 0:
    i = i * 10 + (o % 10)
    o //= 10
else: # В данным случае у цикла While есть блок else, который срабатывает после завершения цикла.
    print('пожалуй')
    print('хватит')
print(i)

for i in 1,2,3,4,5: # Получается, i пробегает по всем in, т.е. i == 1, ... , 5.
# И число i возводится в квадрат путём i**2, если бы было i**3, то в кубе.
    print(i**2)

# Или с массивом (Списком)
list1 = [1,2,3,4,5,6]
for i in list1:
    print(i**2)

# Или так
r = range(10) # Итератор range(10), подразумевает, что в нём цифры от 0 до 10, т.е. 10 не входит.
for i in r:   # И получается мы выводим все цифры от 0 до 9 включительно.
    print(i)
# Или так
for i in range(4):
    print(i)
# Или так
for i in range(2,6): # Т.е. будет вывод от 2 до 5 включительно.
    print(i)
# Или так
for i in range(2,11,3): # Т.е. будет вывод от 2 до 11 включительно, с кратностью + 3.
    print(i)
# Или так
for i in 'qwer dfg -': # Т.е. можно выводить все элементы строки и даже знаки и пробелы.
    print(i)



# Не много о строках.
text = 'qwerevch'
print(len(text)) # len - выведет число элементов строки.
print('er' in text) # 'er' in text - данный способ вывод True или False, т.е. 'er' есть в переменной текст или нет.
print(text.isdigit()) # text.isdigit() - данный способ вывод True или False при условии если все элемента строки - цифры.
print(text.islower()) # text.islower() - данный способ вывод True или False при условии если все элемента строки - в нижнем регистре.
print(text.replace('qwe','123')) # text.islower() - данный способ преобразует элементы на другие.

for c in text:
    print(c)


# # Как можно изучать команды Python.
# help(text.istitle) # Пишем help и в скобках, что будет если к переменной text lj, добавить istitle, в терминале появится сообщение с инструкцией.
# # А так же и для любых запросов.
# help(int) # Так же появится описание в терминале, что бы закрыть это описание нужно нажать "q".

spis = 'qwer tyui o[v nmdfgh'
print(spis[0])
print(spis[1])
print(spis[len(spis)-1]) # Т.е. мы запросили элемент строки с индексом len(spis)-1, где  len(spis) - 23, а len(spis)-1 - 22, что и является последним индексом строки.
print(spis[-5]) # Выводим элемент с индексом -5 с конца.
print(spis[:]) # Тоже самое, что и print(spis), потому, что на самом деле оно по умолчанию пишется как spis[0:len(spis)-1].
print(spis[:2]) # Будет выглядеть как spis[0:2], т.е. от индекса "0" до индекса "2-1" включительно.
print(spis[len(spis)-2:]) # Будет выглядеть как spis[len(spis)-2:len(spis)], т.е. выводит предпоследний и последний элемент.
print(spis[0:len(spis):5]) # С начало выводит элемент с индексом 0, а потом выводит элемент с индексом 5, далее прибавляет каждый раз пока не кончится строка
# к индексы 5 + 5 и выводит, если же это не возможно то просто выведет индекс 0 и 5.
print(spis[::6]) # Выводит кратно индексу 6 от индекса 0.
spis = spis[2:9] + spis[-4] + spis[:3] # Складываем элементы строки.
print(spis)



# Списки введение:

numbers = [1, 2, 3, 4, 5]
numbers = list(range(1, 6))
# Почему мы так написали numbers = list(range(1, 6)).
# Если указать просто numbers = range(1, 6), то это уже не будет список (массив), а просто вывод от 1 до 6.
# А в данном случа мы к списку (массиву) list присвоили range(от 1, до 6) и у нас получился список numbers = [1, 2, 3, 4, 5].
# Это всё из за того, что разные типы данных у list и range.
print(numbers) 
numbers[0] = 10
print(numbers) 
for i in numbers:
    i *= 2
    print(i) 
print(numbers) 


colors = ['red', 'green', 'blue']
for e in colors:
    print(e) # Выведет список построчно.
for e in colors:
    print(e*2) # Выведет список построчно и каждый элемент увеличит в двое.
colors.append('gray') # Командой .append, добавили 'gray' в конец как новый элемент списка.
print(colors == ['red', 'green', 'blue', 'gray']) # Задаём условие правда ли (True)  colors равно ['red', 'green', 'blue', 'gray'], и получаем True, так как они равны.
colors.remove('green') # Командой .remove удалили элемент 'green' из списка.
print(colors)
# Или
del colors[0] # Командой del colors[0] удаляем элемент списка с индексом 0.
print(colors)




# Функции

# def f(x): # def - функция, f - это название функции, (x) - аргумент.
#     return x**2
def f(x):  # В питон функция может работать одновременно с разным типами данных.
    if x == 1:
        return 'Целое'
    elif x == 2.3:
        return 23   
    else:
        return # Если мы ни чего н возвращаем, то в терминал просто вернётся None.

print(f(1)) # Целое
print(f(2.3)) # 23
print(f(28)) # None
